"""
Django settings for Backend project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
from . import Classification
import os
from google.oauth2 import service_account
import pandas as pd

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@85w3mvv=dkogfm*3+0xad!v9$5z^_fq5y!5rv_0q7gbp2v9j7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Use Google Cloud Storage for static files in production
if os.environ.get('GAE_APPLICATION', None):
    STATIC_URL = f'https://storage.googleapis.com/%7BGS_BUCKET_NAME%7D/static/'

# Diseases ML model
DISEASES = ['Haunglongbing', 'Scorch', 'Esca', 'Scab', 'Bacterial spot', 'Mosaic virus', 'Mold', 'Blight',
            'Healthy', 'Spider mites', 'Leaf curl virus', 'Rust', 'Target spot', 'Black rot', 'leaf spot',
            'Powdery Miledew']
MODEL = Classification.ModelClasses.ResNet9(3, len(DISEASES))

# Recommendation system
SIMILARITY_PATH = os.path.join(BASE_DIR, 'similarity_matrix.csv')
SIMILARITY_DF = pd.read_csv(SIMILARITY_PATH, index_col=0)
TOP_PLANTS_PATH = os.path.join(BASE_DIR, 'top_plants.csv')
TOP_PLANTS_DF = pd.read_csv(TOP_PLANTS_PATH, index_col=0)
RECOMMENDATIONS_AMOUNT = 10

# Application definition
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'idoddii@gmail.com'
EMAIL_HOST_PASSWORD = 'sysyvbobmkjtjzxj'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'crispy_forms',
    "crispy_bootstrap5",

    'PlantItApp.apps.PlantitappConfig',

    'rest_framework',
    'rest_framework.authtoken',

    'storages',
]

KEY_PATH = os.path.join(BASE_DIR, 'plant-it-app-384117-a7e5ae11ce1d.json')
google_credentials = service_account.Credentials.from_service_account_file(KEY_PATH)

# Google Cloud Storage settings
GS_BUCKET_NAME = 'plant-it-app-bucket'
GS_PROJECT_ID = 'plant-it-app-384117'
GS_CREDENTIALS = google_credentials
DIALOGFLOW_LANGUAGE_CODE = 'en-US'
STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'

DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
MEDIA_ROOT = '/'
MEDIA_URL = 'https://storage.googleapis.com/my-plant-it-app-bucket/'

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = 'bootstrap5'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUTHENTICATION_BACKENDS = ['PlantItApp.backends.CustomAuthBackend', 'django.contrib.auth.backends.ModelBackend', ]

ROOT_URLCONF = 'Backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates'
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'plant_it_app',
        'USER': 'root',
        'PASSWORD': 'SantIdo',
        'HOST': '34.165.144.249',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_USER_MODEL = 'PlantItApp.CustomUser'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
